/*The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 

Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2*/
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        
        //sort the array & initialize variable
        Arrays.sort(nums); 
        int n = nums.length; 
        int l = 0; 
        int r = nums[n-1] - nums[0]; 
        
        //simple binary search
        //check whether value is greater or equal to k (and execute binary search function)
        while(l < r){
            int m = l+ (r-l) / 2; 
            
            //just assume that condition function excute and give us the answer
            if(condition(nums, m)>=k){
                r = m; 
            }else {
                l = m +1; 
            }
            
        }
        return l;
                
    }
    
    
    //simple sliding window
    //remember this is sorted array
    private int condition(int [] nums, int mid){
        
        int total = 0; 
        int left = 0;
        for(int right =0 ; right < nums.length; right++){
            
            //check if distance between two values " <= mid "
            
            //if anytime our distance becomes greater so we need to increment left pointer (to minimize distance) upto when condition not becomes true
            while(nums[right] - nums[left] > mid){
                left++; 
            }
            
            //store  " right - left " index (as this is sorted array)
            //  for left to right index values's all must satisfy (<=mid) condition
            total += right - left; 
            
        }
        
        return total;
    }
}
