/*You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 
Example 2:

Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.
Example 3:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50
 

Constraints:

n == nums.length
1 <= nums.length <= 1000
1 <= nums[i] <= 100
1 <= left <= right <= n * (n + 1) / 2*/
import java.util.*;

class Solution {
    private static final int MODULUS = 1000000007;
    private long maxSubarraySum = 0;
    private long minSubarraySum = 0;

    private Map.Entry<Integer, Long> countAndSumSubarrays(int[] array, long threshold) {
        int count = 0;
        long totalSum = 0;
        long currentWindowSum = 0;
        long runningSum = 0;
        int size = array.length;

        for (int start = 0, end = 0; end < size; ++end) {
            runningSum += (long) array[end] * (end - start + 1);
            currentWindowSum += array[end]; 
            while (currentWindowSum > threshold) {
                runningSum -= currentWindowSum;
                currentWindowSum -= array[start++];
            }
            count += end - start + 1;
            totalSum += runningSum;
        }
        return new AbstractMap.SimpleEntry<>(count, totalSum);
    }

    private long calculateSumOfFirstKSubarrays(int[] array, int k) {
        long low = minSubarraySum, high = maxSubarraySum;
        while (low < high) {
            long mid = low + (high - low) / 2;
            if (countAndSumSubarrays(array, mid).getKey() < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        Map.Entry<Integer, Long> result = countAndSumSubarrays(array, low);
        long sum = result.getValue();
        int count = result.getKey();
        return sum - low * (count - k);
    }

    public int rangeSum(int[] nums, int n, int left, int right) {
        minSubarraySum = nums[0];
        for (int num : nums) {
            maxSubarraySum += num;
            minSubarraySum = Math.min(minSubarraySum, num);
        }

        long result = (calculateSumOfFirstKSubarrays(nums, right) % MODULUS - 
                       calculateSumOfFirstKSubarrays(nums, left - 1) % MODULUS + 
                       MODULUS) % MODULUS;
        return (int) result;
    }
}
